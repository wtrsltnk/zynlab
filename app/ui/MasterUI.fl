# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
decl {//Copyright (c) 2002-2009 Nasca Octavian Paul} {private local
}

decl {//License: GNU GPL version 2 or later} {private local
}

decl {\#include <stdlib.h>} {public local
}

decl {\#include <stdio.h>} {public local
}

decl {\#include <string.h>} {public local
}

decl {\#include "WidgetPDial.h"} {public local
}

decl {\#include "ADnoteUI.h"} {public local
}

decl {\#include "SUBnoteUI.h"} {public local
}

decl {\#include "EffUI.h"} {public local
}

decl {\#include "VirKeyboard.h"} {public local
}

decl {\#include "ConfigUI.h"} {public local
}

decl {\#include "BankUI.h"} {public local
}

decl {\#include "PartUI.h"} {public local
}

decl {\#include "MicrotonalUI.h"} {public local
}

decl {\#include "PresetsUI.h"} {public local
}

decl {\#include "SequencerUI.h"} {public local
}

decl {\#include "NioUI.h"} {public global
}

decl {\#include "zyn.common/globals.h"} {public
}

decl {\#include "zyn.mixer/Instrument.h"} {public local
}

decl {\#include "zyn.seq/Sequencer.h"} {public global
}

decl {\#include "zyn.common/Util.h"} {public local
}

decl {\#include "common.H"} {public local
}

decl {\#include "zyn.common/globals.h"} {public local
}

class VUMeter {: {public Fl_Box}
} {
  Function {VUMeter(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {open
  } {
    code {master=nullptr;
npart=-1;} {}
  }
  Function {init(Mixer *master_,int part_)} {open
  } {
    code {//the "part_" parameters sets the part (if it is >=0), else it sets the master
master=master_;
label(nullptr);
npart=part_;
olddbl=0.0;
olddbr=0.0;
oldrmsdbl=0.0;
oldrmsdbr=0.0;} {}
  }
  Function {draw_master()} {open
  } {
    code {\#define MIN_DB (-48)

int ox=x(); int oy=y(); int lx=w(); int ly=h();

vuData data = master->GetMeter()->GetVuData();

//master->Lock();
float dbl=rap2dB(data.outpeakl);
float dbr=rap2dB(data.outpeakr);
float rmsdbl=rap2dB(data.rmspeakl);
float rmsdbr=rap2dB(data.rmspeakr);
float maxdbl=rap2dB(data.maxoutpeakl);
float maxdbr=rap2dB(data.maxoutpeakr);
int clipped=data.clipped;
//master->Unlock();

dbl=(MIN_DB-dbl)/MIN_DB; 
if (dbl<0.0) dbl=0.0;
  else if (dbl>1.0)dbl=1.0;

dbr=(MIN_DB-dbr)/MIN_DB; 
if (dbr<0.0) dbr=0.0;
  else if (dbr>1.0) dbr=1.0; 

dbl=dbl*0.4+olddbl*0.6;
dbr=dbr*0.4+olddbr*0.6;

if ( damage() & FL_DAMAGE_USER1 )
{
        if ( olddbl == dbl && olddbr == dbr )
             return;
}

olddbl=dbl;
olddbr=dbr;

\#define VULENX (lx-35)
\#define VULENY (ly/2-3)

dbl*=VULENX;dbr*=VULENX;

int idbl=(int) dbl;
int idbr=(int) dbr;

//compute RMS - start
rmsdbl=(MIN_DB-rmsdbl)/MIN_DB; 
if (rmsdbl<0.0) rmsdbl=0.0;
  else if (rmsdbl>1.0) rmsdbl=1.0;

rmsdbr=(MIN_DB-rmsdbr)/MIN_DB; 
if (rmsdbr<0.0) rmsdbr=0.0;
  else if (rmsdbr>1.0) rmsdbr=1.0; 

rmsdbl=rmsdbl*0.4+oldrmsdbl*0.6;
rmsdbr=rmsdbr*0.4+oldrmsdbr*0.6;

oldrmsdbl=rmsdbl;
oldrmsdbr=rmsdbr;


rmsdbl*=VULENX;rmsdbr*=VULENX;

int irmsdbl=(int) rmsdbl;
int irmsdbr=(int) rmsdbr;
//compute RMS - end



//draw the vu-meter lines
//db
fl_rectf(ox,oy,idbr,VULENY,0,200,255);
fl_rectf(ox,oy+ly/2,idbl,VULENY,0,200,255);
//black
fl_rectf(ox+idbr,oy,VULENX-idbr,VULENY,0,0,0);
fl_rectf(ox+idbl,oy+ly/2,VULENX-idbl,VULENY,0,0,0);

//draw the scales
float  tmp=VULENX*1.0/MIN_DB;
for (int i=1;i<1-MIN_DB;i++){
   int tx=VULENX+(int) (tmp*i);
   fl_rectf(ox+tx,oy,1,VULENY+ly/2,0,160,200);
   if (i%5==0) fl_rectf(ox+tx,oy,1,VULENY+ly/2,0,230,240);
   if (i%10==0) fl_rectf(ox+tx-1,oy,2,VULENY+ly/2,0,225,255);
};

//rms
if (irmsdbr>2) fl_rectf(ox+irmsdbr-1,oy,3,VULENY,255,255,0);
if (irmsdbl>2) fl_rectf(ox+irmsdbl-1,oy+ly/2,3,VULENY,255,255,0);


//draw the red box if clipping has occured
if (clipped==0) fl_rectf(ox+VULENX+2,oy+1,lx-VULENX-3,ly-4,0,0,10);
           else fl_rectf(ox+VULENX+2,oy+1,lx-VULENX-3,ly-4,250,10,10);

//draw the maxdB 
fl_font(FL_HELVETICA|FL_BOLD,10);
fl_color(255,255,255);
char tmpstr[10];
if ((maxdbl>MIN_DB-20)){
  snprintf((char *)&tmpstr,10,"%ddB",(int)maxdbr);
  fl_draw(tmpstr,ox+VULENX+1,oy+1,lx-VULENX-1,VULENY,FL_ALIGN_RIGHT,nullptr,0);
};
if ((maxdbr>MIN_DB-20)){
  snprintf((char *)&tmpstr,10,"%ddB",(int)maxdbl);
  fl_draw(tmpstr,ox+VULENX+1,oy+ly/2+1,lx-VULENX-1,VULENY,FL_ALIGN_RIGHT,nullptr,0);
};} {}
  }
  Function {draw_part()} {} {
    code {\#define MIN_DB (-48)
int ox=x(); int oy=y(); int lx=w(); int ly=h();

if (!active_r()){
   int fakedb=master->GetMeter()->GetFakePeak(npart);
  fl_rectf(ox,oy,lx,ly,140,140,140);
  if (fakedb>0){
    fakedb=(int)(fakedb/255.0*ly)+4;
    fl_rectf(ox+2,oy+ly-fakedb,lx-4,fakedb,0,0,0);
  };
  
  return;
};

//draw the vu lines
float db=master->GetMeter()->GetOutPeak(npart);

db=(MIN_DB-db)/MIN_DB; 
if (db<0.0) db=0.0;
  else if (db>1.0) db=1.0;

db*=ly-2;

int idb=(int) db;

fl_rectf(ox,oy+ly-idb,lx,idb,0,200,255);
fl_rectf(ox,oy,lx,ly-idb,0,0,0);


//draw the scales
float  tmp=ly*1.0/MIN_DB;
 for (int i=1;i<1-MIN_DB;i++){
    int ty=ly+(int) (tmp*i);
    if (i%5==0) fl_rectf(ox,oy+ly-ty,lx,1,0,160,200);
    if (i%10==0) fl_rectf(ox,oy+ly-ty,lx,1,0,230,240);
};} {}
  }
  Function {draw()} {} {
    code {if (npart>=0) draw_part();
   else draw_master();} {}
  }
  Function {tickdraw(VUMeter *o)} {open return_type {static void}
  } {
    code {o->damage(FL_DAMAGE_USER1);} {}
  }
  Function {tick(void *v)} {open return_type {static void}
  } {
    code {tickdraw((VUMeter *) v);
          Fl::repeat_timeout(1.0/18.0,tick,v);//18 fps} {}
  }
  Function {handle(int event)} {open return_type int
  } {
    code {switch(event){
   case FL_SHOW:
             Fl::add_timeout(1.0/18.0,tick,this);
             break;
   case FL_HIDE:
             Fl::remove_timeout(tick,this);
             break;
   case FL_PUSH:
             if (npart>=0) break;
             master->Lock();
             master->GetMeter()->ResetPeaks();
             master->Unlock();
             break;
};
return(1);} {}
  }
  decl {Mixer *master;} {private local
  }
  decl {int npart;} {private local
  }
  decl {float olddbl,olddbr;} {private local
  }
  decl {float oldrmsdbl,oldrmsdbr;} {private local
  }
}

class SysEffSend {: {public WidgetPDial}
} {
  Function {SysEffSend(int x,int y, int w, int h, const char *label=0):WidgetPDial(x,y,w,h,label)} {open
  } {
    code {master=nullptr;
neff1=0;
neff2=0;} {}
  }
  Function {init(Mixer *master_,int neff1_,int neff2_)} {open
  } {
    code {neff1=neff1_;
neff2=neff2_;
master=master_;
minimum(0);
maximum(127);
step(1);
labelfont(1);
labelsize(10);
align(FL_ALIGN_TOP);

value(master->GetSystemEffectSend(neff1, neff2));
char tmp[20];snprintf(tmp,20,"%d->%d",neff1+1,neff2+1);
this->copy_label(tmp);} {}
  }
  Function {~SysEffSend()} {} {
    code {hide();} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {if ((event==FL_PUSH) || (event==FL_DRAG)){
   master->SetSystemEffectSend(neff1,neff2,(int) value());
};

return(WidgetPDial::handle(event));} {}
  }
  decl {Mixer *master;} {private local
  }
  decl {int neff1;} {private local
  }
  decl {int neff2;} {private local
  }
}

class Panellistitem {: {public Fl_Group}
} {
  Function {make_window()} {private
  } {
    Fl_Window panellistitem {
      private xywh {932 250 150 422} type Double box NO_BOX color 51 hide
      class Fl_Group
    } {
      Fl_Group panellistitemgroup {open
        private xywh {0 20 70 400} box UP_BOX
        code0 {if (master->GetChannel(npart)->Penabled==0) o->deactivate();}
        code1 {set_module_parameters( o );}
      } {
        Fl_Group {} {open
          xywh {45 236 15 153} box ENGRAVED_FRAME
        } {
          Fl_Box {} {
            label {V U}
            xywh {45 236 15 153} box FLAT_BOX color 0 selection_color 75 labelcolor 55 align 128
            code0 {o->init(master,npart);}
            class VUMeter
          }
        }
        Fl_Button partname {
          label defaults
          callback {if ((int)bankui->cbwig->value()!=(npart+1)){
   bankui->cbwig->value(npart+1);
   bankui->cbwig->do_callback();
};
bankui->show();}
          xywh {5 43 60 26} box THIN_DOWN_BOX down_box FLAT_BOX labelfont 1 labelsize 10 align 208
        }
        Fl_Slider partvolume {
          callback {master->GetChannel(npart)->setPvolume((int) o->value());}
          tooltip {Part volume} xywh {10 236 30 153} type {Vert Knob} box NO_BOX minimum 127 maximum 0 step 1 value 127
          code0 {o->value(master->GetChannel(npart)->Pvolume);}
        }
        Fl_Dial partpanning {
          callback {master->GetChannel(npart)->setPpanning((int) o->value());}
          tooltip {Part panning} xywh {25 392 20 22} maximum 127 step 1
          code0 {o->value(master->GetChannel(npart)->Ppanning);}
          class WidgetPDial
        }
        Fl_Choice partrcv {
          callback {master->GetChannel(npart)->Prcvchn=(int) o->value();} open
          tooltip {receive from Midi channel} xywh {5 25 60 15} down_box BORDER_BOX labelsize 10 align 5 textfont 1 textsize 10
          code0 {char nrstr[10]; for(int i=0;i<NUM_MIXER_CHANNELS;i++){sprintf(nrstr,"Ch%d",i+1);if (i!=9) o->add(nrstr); else o->add("Dr10");};}
          code1 {o->value(master->GetChannel(npart)->Prcvchn);}
        } {}
        Fl_Pack {} {
          label Sends open
          xywh {5 86 60 125} color 41
          code0 {o->spacing(5);}
          code1 {for (int i=0;i<NUM_SYS_EFX;i++){psyef[i]=new PartSysEffSend(0,0,35,25,"");psyef[i]->init(master,npart,i);}}
        } {}
        Fl_Button {} {
          label Effects
          callback {//partfx->show();}
          xywh {5 213 60 20} box THIN_UP_BOX
        }
      }
      Fl_Check_Button partenabled {
        label 01
        callback {master->Lock();
 master->EnableChannel(npart,(int) o->value());
master->Unlock();

if ((int) o->value()==0) panellistitemgroup->deactivate();
  else {
    panellistitemgroup->activate();
    if ((int)bankui->cbwig->value()!=(npart+1)){
       bankui->cbwig->value(npart+1);
       bankui->cbwig->do_callback();
    };
};

o->redraw();}
        private xywh {5 0 45 20} down_box DOWN_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 13 align 24
        code0 {char tmp[10];snprintf(tmp,10,"%d",npart+1);o->copy_label(tmp);}
        code1 {o->value(master->GetChannel(npart)->Penabled);}
      }
    }
  }
  Function {Panellistitem(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {open
  } {
    code {npart=0;
master=nullptr;
bankui=nullptr;} {}
  }
  Function {init(Mixer *master_, int npart_,BankUI *bankui_)} {open
  } {
    code {npart=npart_;
master=master_;
bankui=bankui_;

make_window();
panellistitem->show();
end();} {}
  }
  Function {refresh()} {open
  } {
    code {partenabled->value(master->GetChannel(npart)->Penabled);
if (master->GetChannel(npart)->Penabled!=0) panellistitemgroup->activate();
     else panellistitemgroup->deactivate();

partvolume->value(master->GetChannel(npart)->Pvolume);
partpanning->value(master->GetChannel(npart)->Ppanning);
partrcv->value(master->GetChannel(npart)->Prcvchn);

partname->label((char *)master->GetChannel(npart)->Pname);

if ((int)bankui->cbwig->value()!=(npart+1))
   panellistitemgroup->color(fl_rgb_color(160,160,160));
else 
   panellistitemgroup->color(fl_rgb_color(50,190,240));

panellistitemgroup->redraw();} {}
  }
  Function {~Panellistitem()} {} {
    code {panellistitem->hide();
//delete(panellistitem);} {}
  }
  decl {int npart;} {private local
  }
  decl {Mixer *master;} {private local
  }
  decl {BankUI *bankui;} {private local
  }
  decl {PartSysEffSend *psyef[NUM_SYS_EFX];} {private local
  }
}

class MasterUI {open
} {
  Function {make_window()} {open
  } {
    Fl_Window masterwindow {
      label zynaddsubfx
      callback {if ((
\#ifdef PLUGINVERSION
1
\#else
0
\#endif
 || fl_choice("Exit and leave the unsaved data?","No","Yes",nullptr))) {
    Config::Current().save();
    *exitprogram=1;
};} open
      xywh {979 190 390 524} type Double hide xclass zynaddsubfx
    } {
      Fl_Menu_Bar mastermenu {open selected
        xywh {-5 0 690 25}
      } {
        Submenu {} {
          label {&File} open
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {&New (erase all)...}
            callback {do_new_master();}
            xywh {20 20 100 20}
          }
          MenuItem {} {
            label {&Open Parameters...}
            callback {do_load_master();}
            xywh {20 20 100 20}
          }
          MenuItem {} {
            label {&Save All Parameters...}
            callback {do_save_master();}
            xywh {10 10 100 20} divider
          }
          MenuItem {} {
            label {&Load Scale Settings...}
            callback {char *filename;
filename=fl_file_chooser("Open:","({*.xsz})",nullptr,0);
if (filename==nullptr) return;

master->Lock();
  //clear all parameters
  master->microtonal.defaults();

  //load the data
  int result=master->microtonal.loadXML(filename);
master->Unlock();


 delete microtonalui;  
 microtonalui=new MicrotonalUI(&master->microtonal);

if (result==-10) fl_alert("Error: Could not load the file\\nbecause it is not a scale file.");
      else if (result<0) fl_alert("Error: Could not load the file.");}
            xywh {35 35 100 20}
          }
          MenuItem {} {
            label {Save Sc&ale Settings ..}
            callback {char *filename;
int result=0;

filename=fl_file_chooser("Save:","({*.xsz})",nullptr,0);
if (filename==nullptr) return;
filename=fl_filename_setext(filename,".xsz");

result=fileexists(filename);
if (result) {
    result=0;
   if (!fl_choice("The file exists. \\nOverwrite it?","No","Yes",nullptr)) return;
       
};


master->Lock();
result=master->microtonal.saveXML(filename);
master->Unlock();

if (result<0) fl_alert("Error: Could not save the file.");


updatepanel();}
            xywh {25 25 100 20}
          }
          MenuItem {} {
            label {Show Scale Settings...}
            callback {microtonalui->show();}
            xywh {0 0 100 20} divider
          }
          MenuItem {} {
            label {&Settings...}
            callback {configui->show();}
            xywh {25 25 100 20}
          }
          MenuItem {} {
            label {&Copyright...}
            callback {aboutwindow->show();}
            xywh {15 15 100 20} divider
          }
          MenuItem {} {
            label {E&xit}
            callback {masterwindow->do_callback();}
            xywh {10 10 100 20}
          }
        }
        Submenu {} {
          label {&Instrument}
          xywh {10 10 100 20}
        } {
          MenuItem {} {
            label {&Clear Instrument...}
            callback {if (fl_choice("Clear instrument's parameters ?","No","Yes",nullptr)){
//       int npart=(int)npartcounter->value()-1;
       master->Lock();
       master->GetChannel(npart)->InstrumentDefaults();
       master->Unlock();

       npartcounter->do_callback();
};

updatepanel();}
            xywh {35 35 100 20}
          }
          MenuItem {} {
            label {&Open Instrument...}
            callback {const char *filename;
filename=fl_file_chooser("Load:","({*.xiz})",nullptr,0);
if (filename==nullptr) return;


master->Lock();
//  int npart=(int)npartcounter->value()-1;

  //clear all instrument parameters, first
  master->GetChannel(npart)->InstrumentDefaults();

  //load the instr. parameters
  int result=master->GetChannel(npart)->loadXMLinstrument(filename);

master->Unlock();
master->GetChannel(npart)->applyparameters();

npartcounter->do_callback();
updatepanel();

if (result==-10) fl_alert("Error: Could not load the file\\nbecause it is not an instrument file.");
      else if (result<0) fl_alert("Error: Could not load the file.");}
            xywh {30 30 100 20}
          }
          MenuItem {} {
            label {&Save Instrument ...}
            callback {char *filename;

filename=fl_file_chooser("Save:","({*.xiz})",nullptr,0);
if (filename==nullptr) return;
filename=fl_filename_setext(filename,".xiz");

int result=fileexists(filename);
if (result) {
    result=0;
   if (!fl_choice("The file exists. \\nOverwrite it?","No","Yes",nullptr)) return;
       
};


master->Lock();
result=master->GetChannel(npart)->saveXML(filename);
master->Unlock();

if (result<0) fl_alert("Error: Could not save the file.");

updatepanel();}
            xywh {20 20 100 20} divider
          }
          MenuItem {} {
            label {Show Instrument &Bank...}
            callback {bankui->show();}
            xywh {0 0 100 20} divider
          }
          MenuItem {} {
            label {&Virtual Keyboard...}
            callback {virkeyboard->show();}
            xywh {10 10 100 20}
          }
        }
        Submenu {} {
          label Misc
          xywh {10 10 100 20}
        } {
          MenuItem {} {
            label {Switch User Interface Mode}
            callback {if (fl_choice("Switch the User Interface to Beginner mode ?","No","Yes",nullptr)){
	masterwindow->hide();
	refresh_master_ui();
	simplemasterwindow->show();
    Config::Current().cfg.UserInterfaceMode=2;
};}
            xywh {10 10 100 20}
          }
        }
      }
      Fl_Dial mastervolumedial {
        label {Master Volume}
        callback {master->setPvolume((int) o->value());}
        tooltip {Master Volume} xywh {15 32 55 55} box ROUND_UP_BOX labelsize 9 align 130 maximum 127 step 1
        code0 {o->value(master->Pvolume);}
        class WidgetPDial
      }
      Fl_Counter masterkeyshiftcounter {
        label {Master KeyShift}
        callback {master->setPkeyshift((int) o->value()+64);}
        xywh {150 97 120 23} type Simple labelsize 9 minimum -64 maximum 64 step 1
        code0 {o->lstep(12);}
        code1 {o->value(master->Pkeyshift-64);}
      }
      Fl_Button {} {
        label {Panic!}
        callback {virkeyboard->relaseallkeys();
master->Lock();
master->shutup=1;
master->Unlock();}
        xywh {280 29 105 39} color 90 labelfont 1
      }
      Fl_Group partuigroup {open
        xywh {0 310 390 205}
      } {
        Fl_Group partui {open
          xywh {0 310 383 175}
          code0 {o->init(master->GetChannel(0),master,0,bankui);}
          code1 {o->show();}
          class PartUI
        } {}
      }
      Fl_Tabs {} {open
        xywh {0 145 390 165} box UP_FRAME
      } {
        Fl_Group {} {
          label {System Effects} open
          xywh {0 162 390 145} labelsize 15 align 9
        } {
          Fl_Counter syseffnocounter {
            label {Sys.Effect No.}
            callback {nsyseff=(int) o->value()-1;
sysefftype->value(master->sysefx[nsyseff].geteffect());
syseffectui->refresh(&master->sysefx[nsyseff]);}
            xywh {5 181 80 22} type Simple labelfont 1 labelsize 10 align 1 minimum 0 maximum 127 step 1 value 1 textfont 1
            code0 {o->bounds(1,NUM_SYS_EFX);}
            code1 {o->value(nsyseff+1);}
          }
          Fl_Choice sysefftype {
            label EffType
            callback {master->Lock();
master->sysefx[nsyseff].changeeffect((int) o->value());
master->Unlock();
syseffectui->refresh(&master->sysefx[nsyseff]);}
            xywh {285 176 100 22} down_box BORDER_BOX labelsize 10
            code0 {o->value(master->sysefx[nsyseff].geteffect());}
          } {
            MenuItem {} {
              label {No Effect}
              xywh {10 10 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Reverb
              xywh {20 20 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Echo
              xywh {30 30 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Chorus
              xywh {40 40 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Phaser
              xywh {50 50 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label AlienWah
              xywh {60 60 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Distortion
              xywh {70 70 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label EQ
              xywh {80 80 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label DynFilter
              xywh {90 90 100 20} labelfont 1 labelsize 10
            }
          }
          Fl_Group syseffectuigroup {open
            xywh {5 203 380 95} color 48
          } {
            Fl_Group syseffectui {
              xywh {5 203 380 95}
              code0 {o->init(&master->sysefx[nsyseff]);}
              class EffUI
            } {}
          }
          Fl_Button {} {
            label {Send to...}
            callback {syseffsendwindow->show();}
            xywh {90 181 85 22} box THIN_UP_BOX labelfont 1 labelsize 11
          }
          Fl_Button {} {
            label C
            callback {presetsui->copy(&master->sysefx[nsyseff]);}
            xywh {180 187 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 55
          }
          Fl_Button {} {
            label P
            callback {master->Lock();
presetsui->paste(&master->sysefx[nsyseff],syseffectui);
master->Unlock();}
            xywh {210 187 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 55
          }
        }
        Fl_Group {} {
          label {Insertion Effects} open
          xywh {0 165 390 145} labelsize 15 align 9 hide
        } {
          Fl_Counter inseffnocounter {
            label {Ins.Effect No.}
            callback {ninseff=(int) o->value()-1;
insefftype->value(master->insefx[ninseff].geteffect());
inseffpart->value(master->Pinsparts[ninseff]+2);
inseffectui->refresh(&master->insefx[ninseff]);

if (master->Pinsparts[ninseff]!=-1) {
        insefftype->activate();
	inseffectui->activate();
        inseffectuigroup->activate();
} else {
	insefftype->deactivate();
 	inseffectui->deactivate();
        inseffectuigroup->deactivate();
};}
            xywh {5 183 80 22} type Simple labelfont 1 labelsize 10 align 1 minimum 0 maximum 127 step 1 value 1 textfont 1
            code0 {o->bounds(1,NUM_INS_EFX);}
            code1 {o->value(ninseff+1);}
          }
          Fl_Choice insefftype {
            label EffType
            callback {master->Lock();
master->insefx[ninseff].changeeffect((int) o->value());
master->Unlock();
inseffectui->refresh(&master->insefx[ninseff]);
inseffectui->show();}
            xywh {285 173 100 22} down_box BORDER_BOX labelsize 10
            code0 {o->value(master->insefx[ninseff].geteffect());}
            code1 {if (master->Pinsparts[ninseff]== -1) o->deactivate();}
          } {
            MenuItem {} {
              label {No Effect}
              xywh {25 25 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Reverb
              xywh {35 35 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Echo
              xywh {45 45 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Chorus
              xywh {55 55 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Phaser
              xywh {60 60 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label AlienWah
              xywh {70 70 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label Distortion
              xywh {80 80 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label EQ
              xywh {90 90 100 20} labelfont 1 labelsize 10
            }
            MenuItem {} {
              label DynFilter
              xywh {100 100 100 20} labelfont 1 labelsize 10
            }
          }
          Fl_Group inseffectuigroup {open
            xywh {5 205 380 95} box FLAT_BOX color 48
          } {
            Fl_Group inseffectui {
              xywh {5 205 380 90} box UP_FRAME
              code0 {o->init(&master->insefx[ninseff]);}
              code1 {if (master->Pinsparts[ninseff]== -1) o->deactivate();}
              class EffUI
            } {}
          }
          Fl_Choice inseffpart {
            label {Insert To.}
            callback {master->Pinsparts[ninseff]=(int) o->value()-2;
if ((int) o->value()==1){
    inseffectuigroup->deactivate();
    insefftype->deactivate();
    inseffectui->deactivate();
} else {
    inseffectuigroup->activate();
    insefftype->activate();
    inseffectui->activate();
};
master->insefx[ninseff].cleanup();} open
            xywh {95 183 80 22} down_box BORDER_BOX labelfont 1 labelsize 10 align 5 textsize 10
            code0 {o->add("Master Out");o->add("Off");}
            code1 {char tmp[50]; for (int i=0;i<NUM_MIXER_CHANNELS;i++) {sprintf(tmp,"Part %2d",i+1);o->add(tmp);};}
            code3 {o->value(master->Pinsparts[ninseff]+2);}
          } {}
          Fl_Button {} {
            label C
            callback {presetsui->copy(&master->insefx[ninseff]);}
            xywh {180 185 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 55
          }
          Fl_Button {} {
            label P
            callback {master->Lock();
presetsui->paste(&master->insefx[ninseff],inseffectui);
master->Unlock();}
            xywh {210 185 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 55
          }
        }
      }
      Fl_Button {} {
        label Scales
        callback {microtonalui->show();}
        xywh {320 69 65 23} color 51 labelfont 1
      }
      Fl_Group {} {
        xywh {1 490 389 55}
      } {
        Fl_Box {} {
          label {VU-Meter}
          xywh {5 490 380 30} box FLAT_BOX color 48 selection_color 75
          code0 {o->init(master,-1);}
          class VUMeter
        }
      }
      Fl_Check_Button nrpnbutton {
        label NRPN
        callback {master->ctl.NRPN.receive=(int) o->value();}
        tooltip {Receive NRPNs} xywh {10 115 60 25} down_box DOWN_BOX labelsize 12
        code0 {o->value(master->ctl.NRPN.receive);}
      }
      Fl_Counter npartcounter {
        callback {int nval=(int) o->value()-1;
partuigroup->remove(partui);
delete partui;
partui=new PartUI(0,0,765,525);
partuigroup->add(partui);
partui->init(master->GetChannel(nval),master,nval,bankui);
partui->redraw();
o->redraw();
npart=nval;

updatepanel();
simplenpartcounter->value(nval+1);
simplenpartcounter->do_callback();}
        tooltip {The part number} xywh {5 312 50 18} type Simple labelfont 1 minimum 0 maximum 127 step 1 value 1 textfont 1
        code0 {o->bounds(1,NUM_MIXER_CHANNELS);}
        code1 {bankui->init(o);}
      }
      Fl_Button {} {
        label vK
        callback {virkeyboard->show();}
        tooltip {Virtual Keyboard} xywh {280 69 40 23} color 51 labelfont 1
      }
      Fl_Group {} {
        xywh {85 32 55 110} box UP_FRAME
      } {
        Fl_Button {} {
          label Reset
          callback {globalfinedetuneslider->value(64.0);
globalfinedetuneslider->do_callback();}
          tooltip {Master fine detune reset} xywh {90 37 45 23} box THIN_UP_BOX labelsize 10
        }
        Fl_Dial globalfinedetuneslider {
          label {Fine Detune}
          callback {master->microtonal.Pglobalfinedetune=(int) o->value();}
          tooltip {global fine detune} xywh {90 68 45 45} box ROUND_UP_BOX labelsize 9 align 130 maximum 127 step 1 value 64
          code0 {o->value(master->microtonal.Pglobalfinedetune);}
          class WidgetPDial
        }
      }
      Fl_Button {} {
        label {Panel Window}
        callback {updatepanel();
panelwindow->show();}
        tooltip {Panel Window} xywh {280 94 105 23} color 51 labelfont 1 labelsize 10
      }
      Fl_Button sm_indicator1 {
        label SM
        xywh {350 5 35 15} box ROUNDED_BOX down_box ROUNDED_BOX color 45 selection_color 93 labelfont 3 labelcolor 39 deactivate
      }
      Fl_Button {} {
        label {Sequence Window}
        callback {updatepanel();
sequi->show();}
        tooltip {Sequence Window} xywh {280 117 105 23} color 51 labelfont 1 labelsize 10
      }
    }
    Fl_Window aboutwindow {
      label {Copyright...}
      xywh {411 344 365 280} type Double hide
    } {
      Fl_Box {} {
        label {Copyright (c) 2002-2009 Nasca O. PAUL and others. Please read AUTHORS.txt}
        xywh {15 35 335 55} labeltype EMBOSSED_LABEL labelsize 15 align 208
      }
      Fl_Box {} {
        label {This is free software; you may redistribute it and/or modify it under the terms of the 
version 2 (or any later version) of the GNU General Public License as published by the Free Software Fundation.
  This program comes with
 ABSOLUTELY NO WARRANTY. 
 See the version 2 (or any later version) of the 
GNU General Public License for details.}
        xywh {15 90 335 145} labelfont 1 labelsize 11 align 144
      }
      Fl_Button {} {
        label {Close this window}
        callback {aboutwindow->hide();}
        xywh {80 245 190 25} box THIN_UP_BOX labelsize 11
      }
      Fl_Box {} {
        label ZynAddSubFX
        xywh {15 5 335 30} labeltype EMBOSSED_LABEL labelfont 1 labelsize 20 align 16
      }
    }
    Fl_Window syseffsendwindow {
      label {System Effects Send}
      xywh {171 234 150 250} type Double hide resizable
    } {
      Fl_Scroll {} {open
        xywh {0 45 120 170} box FLAT_BOX resizable
        code0 {for (int neff1=0;neff1<NUM_SYS_EFX;neff1++) for (int neff2=neff1+1;neff2<NUM_SYS_EFX;neff2++)}
        code1 {{syseffsend[neff1][neff2]=new SysEffSend(o->x()+(neff2-1)*35,o->y()+15+neff1*50,30,30);syseffsend[neff1][neff2]->label("aaa");syseffsend[neff1][neff2]->init(master,neff1,neff2);};}
      } {}
      Fl_Button {} {
        label Close
        callback {syseffsendwindow->hide();}
        xywh {25 220 80 25} box THIN_UP_BOX
      }
      Fl_Box {} {
        label {Send system effect's output to other system effects}
        xywh {5 5 110 35} labelsize 10 align 192
      }
    }
    Fl_Window panelwindow {
      label {ZynAddSubFX Panel}
      xywh {162 276 1167 469} type Single hide
    } {
      Fl_Pack {} {open
        xywh {5 5 1155 425} type HORIZONTAL
        code0 {for (int i=0;i<NUM_MIXER_CHANNELS;i++){panellistitem[i]=new Panellistitem(0,0,70,422,"");panellistitem[i]->init(master,i,bankui);}}
      } {}
      Fl_Button {} {
        label Close
        callback {panelwindow->hide();
updatepanel();}
        xywh {1050 435 50 25} box THIN_UP_BOX labelsize 13
      }
      Fl_Button {} {
        label Refresh
        callback {updatepanel();}
        xywh {1105 435 55 25} box THIN_UP_BOX labelsize 13
      }
    }
    Fl_Window simplemasterwindow {
      label ZynAddSubFX
      callback {\#ifndef PLUGINVERSION
if (fl_choice("Exit and leave the unsaved data?","No","Yes",nullptr))
\#endif
{
    Config::Current().save();
	*exitprogram=1;
};}
      xywh {687 295 600 335} type Double hide
    } {
      Fl_Menu_Bar simplemastermenu {
        xywh {0 0 690 25}
      } {
        Submenu {} {
          label {&File}
          xywh {10 10 100 20}
        } {
          MenuItem {} {
            label {&New (erase all)...}
            callback {do_new_master();}
            xywh {30 30 100 20}
          }
          MenuItem {} {
            label {&Open Parameters...}
            callback {do_load_master();}
            xywh {30 30 100 20}
          }
          MenuItem {} {
            label {&Save All Parameters...}
            callback {do_save_master();}
            xywh {20 20 100 20} divider
          }
          MenuItem {} {
            label {&Settings...}
            callback {configui->show();}
            xywh {35 35 100 20} divider
          }
          MenuItem {} {
            label {&Copyright...}
            callback {aboutwindow->show();}
            xywh {25 25 100 20} divider
          }
          MenuItem {} {
            label {E&xit}
            callback {masterwindow->do_callback();}
            xywh {20 20 100 20}
          }
        }
        Submenu {} {
          label {&Instrument}
          xywh {20 20 100 20}
        } {
          MenuItem {} {
            label {&Open Instrument...}
            callback {const char *filename;
filename=fl_file_chooser("Load:","({*.xiz})",nullptr,0);
if (filename==nullptr) return;


master->Lock();
//  int npart=(int)npartcounter->value()-1;

  //clear all instrument parameters, first
  master->GetChannel(npart)->InstrumentDefaults();

  //load the instr. parameters
  int result=master->GetChannel(npart)->loadXMLinstrument(filename);

master->Unlock();
master->GetChannel(npart)->applyparameters();

simplenpartcounter->do_callback();

if (result==-10) fl_alert("Error: Could not load the file\\nbecause it is not an instrument file.");
      else if (result<0) fl_alert("Error: Could not load the file.");}
            xywh {40 40 100 20}
          }
          MenuItem {} {
            label {Show Instrument &Bank...}
            callback {bankui->show();}
            xywh {10 10 100 20} divider
          }
        }
        Submenu {} {
          label Misc
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {Switch User Interface Mode}
            callback {if (fl_choice("Switch the User Interface to Advanced mode ?","No","Yes",nullptr)){
	simplemasterwindow->hide();
	refresh_master_ui();
	masterwindow->show();
    Config::Current().cfg.UserInterfaceMode=1;
};}
            xywh {0 0 100 20}
          }
        }
      }
      Fl_Group simplelistitemgroup {open
        private xywh {125 65 215 145} box UP_FRAME
        code0 {if (master->GetChannel(npart)->Penabled==0) o->deactivate();}
      } {
        Fl_Button partname {
          callback {if ((int)bankui->cbwig->value()!=(npart+1)){
   bankui->cbwig->value(npart+1);
   bankui->cbwig->do_callback();
};
bankui->show();}
          xywh {130 72 205 18} box THIN_DOWN_BOX down_box FLAT_BOX color 50 labelfont 1 labelsize 11 align 208
        }
        Fl_Slider partpanning {
          label Pan
          callback {master->GetChannel(npart)->setPpanning((int) o->value());}
          xywh {185 95 145 15} type {Horz Knob} box NO_BOX labelsize 11 maximum 127 step 1 value 64
          code0 {o->value(master->GetChannel(npart)->Ppanning);}
        }
        Fl_Choice partrcv {
          label {Midi Channel Receive}
          callback {virkeys->relaseallkeys(0);
master->GetChannel(npart)->Prcvchn=(int) o->value();
virkeys->midich=(int) o->value();} open
          tooltip {receive from Midi channel} xywh {140 157 65 18} down_box BORDER_BOX labelsize 10 align 130 textfont 1
          code0 {char nrstr[10]; for(int i=0;i<NUM_MIXER_CHANNELS;i++){sprintf(nrstr,"Ch%d",i+1);if (i!=9) o->add(nrstr); else o->add("Dr10");};}
          code1 {o->value(master->GetChannel(npart)->Prcvchn);}
        } {}
        Fl_Dial partvolume {
          callback {master->GetChannel(npart)->setPvolume((int) o->value());}
          xywh {135 95 45 40} labelsize 9 maximum 127 step 1
          code0 {o->value(master->GetChannel(npart)->Pvolume);}
          class WidgetPDial
        }
        Fl_Box {} {
          label Volume
          xywh {130 130 55 20} labelsize 10
        }
        Fl_Check_Button simplepartportamento {
          label Portamento
          callback {master->GetChannel(npart)->ctl.portamento.portamento=(int) o->value();}
          tooltip {Enable/Disable the portamento} xywh {193 127 79 23} down_box DOWN_BOX labelsize 9
          code0 {o->value(master->GetChannel(npart)->ctl.portamento.portamento);}
        }
        Fl_Counter simpleminkcounter {
          label {Min.key}
          callback {master->GetChannel(npart)->Pminkey=(int) o->value();
if (master->GetChannel(npart)->Pminkey>master->GetChannel(npart)->Pmaxkey) o->textcolor(FL_RED);
 else o->textcolor(FL_BLACK);}
          tooltip {Minimum key (that the part receives NoteOn messages)} xywh {210 158 40 15} type Simple labelsize 10 minimum 0 maximum 127 step 1 textsize 10
          code0 {o->value(master->GetChannel(npart)->Pminkey);}
        }
        Fl_Counter simplemaxkcounter {
          label {Max.key}
          callback {master->GetChannel(npart)->Pmaxkey=(int) o->value();

if (master->GetChannel(npart)->Pminkey>master->GetChannel(npart)->Pmaxkey) o->textcolor(FL_RED);
 else o->textcolor(FL_BLACK);}
          tooltip {Maximum key (that the part receives NoteOn messages)} xywh {255 158 40 15} type Simple labelsize 10 minimum 0 maximum 127 step 1 textsize 10
          code0 {o->value(master->GetChannel(npart)->Pmaxkey);}
        }
        Fl_Button {} {
          label m
          callback {if (master->GetChannel(npart)->lastnote>=0) simpleminkcounter->value(master->GetChannel(npart)->lastnote);
simpleminkcounter->do_callback();
simplemaxkcounter->do_callback();}
          tooltip {set the minimum key to the last pressed key} xywh {230 188 15 12} box THIN_UP_BOX labelsize 10
        }
        Fl_Button {} {
          label M
          callback {if (master->GetChannel(npart)->lastnote>=0) simplemaxkcounter->value(master->GetChannel(npart)->lastnote);
simplemaxkcounter->do_callback();
simpleminkcounter->do_callback();}
          tooltip {set the maximum key to the last pressed key} xywh {260 188 15 12} box THIN_UP_BOX labelsize 10
        }
        Fl_Button {} {
          label R
          callback {simpleminkcounter->value(0);
simpleminkcounter->do_callback();
simplemaxkcounter->value(127);
simplemaxkcounter->do_callback();}
          tooltip {reset the minimum key to 0 and maximum key to 127} xywh {245 188 15 12} box THIN_UP_BOX labelfont 1 labelsize 10
        }
        Fl_Counter simplepartkeyshiftcounter {
          label KeyShift
          callback {master->GetChannel(npart)->Pkeyshift=(int) o->value()+64;}
          xywh {280 120 50 20} type Simple labelsize 11 minimum -64 maximum 64 step 1
          code0 {o->lstep(12);}
          code1 {o->value(master->GetChannel(npart)->Pkeyshift-64);}
        }
        Fl_Dial simplesyseffsend {
          callback {master->setPsysefxvol(npart,nsyseff,(int) o->value());}
          xywh {300 160 30 30} maximum 127 step 1
          class WidgetPDial
        }
        Fl_Box {} {
          label Effect
          xywh {295 190 40 15} labelsize 10
        }
      }
      Fl_Check_Button partenabled {
        label Enabled
        callback {master->Lock();
 master->EnableChannel(npart,(int) o->value());
master->Unlock();

if ((int) o->value()==0) simplelistitemgroup->deactivate();
  else {
    simplelistitemgroup->activate();
    if ((int)bankui->cbwig->value()!=(npart+1)){
       bankui->cbwig->value(npart+1);
       bankui->cbwig->do_callback();
    };
};

o->redraw();}
        private xywh {250 40 85 20} down_box DOWN_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 13 align 24
        code0 {//char tmp[10];snprintf(tmp,10,"%d",npart+1);o->copy_label(tmp);}
        code1 {o->value(master->GetChannel(npart)->Penabled);}
      }
      Fl_Box virkeys {
        label Keyboard
        xywh {5 215 590 80} box BORDER_BOX color 17
        code0 {o->init(master);}
        class VirKeys
      }
      Fl_Group {} {open
        xywh {340 30 255 185}
      } {
        Fl_Tabs {} {open
          xywh {345 35 245 175} box UP_FRAME align 18
        } {
          Fl_Group {} {
            label {System Effects} open
            xywh {345 55 245 155} box UP_FRAME labelfont 1 labelsize 12 align 18
          } {
            Fl_Counter simplesyseffnocounter {
              label {Sys.Effect No.}
              callback {nsyseff=(int) o->value()-1;
simplesysefftype->value(master->sysefx[nsyseff].geteffect());
simplesyseffectui->refresh(&master->sysefx[nsyseff]);
simplerefresh();}
              xywh {350 75 80 20} type Simple labelfont 1 labelsize 10 align 1 minimum 0 maximum 127 step 1 value 1 textfont 1
              code0 {o->bounds(1,NUM_SYS_EFX);}
              code1 {o->value(nsyseff+1);}
            }
            Fl_Choice simplesysefftype {
              label EffType
              callback {master->Lock();
master->sysefx[nsyseff].changeeffect((int) o->value());
master->Unlock();
simplesyseffectui->refresh(&master->sysefx[nsyseff]);}
              xywh {515 80 70 15} down_box BORDER_BOX labelsize 10 align 5
              code0 {o->value(master->sysefx[nsyseff].geteffect());}
            } {
              MenuItem {} {
                label {No Effect}
                xywh {20 20 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label Reverb
                xywh {30 30 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label Echo
                xywh {40 40 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label Chorus
                xywh {50 50 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label Phaser
                xywh {60 60 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label AlienWah
                xywh {70 70 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label Distortion
                xywh {80 80 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label EQ
                xywh {90 90 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label DynFilter
                xywh {100 100 100 20} labelfont 1 labelsize 10
              }
            }
            Fl_Group simplesyseffectuigroup {open
              xywh {350 95 235 95} color 48
            } {
              Fl_Group simplesyseffectui {
                xywh {350 95 234 95}
                code0 {o->init(&master->sysefx[nsyseff]);}
                class SimpleEffUI
              } {}
            }
            Fl_Button {} {
              label {Send to...}
              callback {syseffsendwindow->show();}
              xywh {435 75 75 20} box THIN_UP_BOX labelfont 1 labelsize 11
            }
            Fl_Button {} {
              label P
              callback {master->Lock();
presetsui->paste(&master->sysefx[nsyseff],simplesyseffectui);
master->Unlock();}
              xywh {560 65 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 55
            }
          }
          Fl_Group {} {
            label {Insertion Effects}
            xywh {345 55 245 155} box UP_FRAME labelfont 1 labelsize 12 align 18 hide
          } {
            Fl_Counter simpleinseffnocounter {
              label {Ins.Effect No.}
              callback {ninseff=(int) o->value()-1;
simpleinsefftype->value(master->insefx[ninseff].geteffect());
simpleinseffpart->value(master->Pinsparts[ninseff]+2);
simpleinseffectui->refresh(&master->insefx[ninseff]);

if (master->Pinsparts[ninseff]!=-1) {
        simpleinsefftype->activate();
	simpleinseffectui->activate();
        simpleinseffectuigroup->activate();
} else {
	simpleinsefftype->deactivate();
 	simpleinseffectui->deactivate();
        simpleinseffectuigroup->deactivate();
};}
              xywh {350 75 80 20} type Simple labelfont 1 labelsize 10 align 1 minimum 0 maximum 127 step 1 value 1 textfont 1
              code0 {o->bounds(1,NUM_INS_EFX);}
              code1 {o->value(ninseff+1);}
            }
            Fl_Choice simpleinsefftype {
              label EffType
              callback {master->Lock();
master->insefx[ninseff].changeeffect((int) o->value());
master->Unlock();
simpleinseffectui->refresh(&master->insefx[ninseff]);
simpleinseffectui->show();}
              xywh {515 80 70 15} down_box BORDER_BOX labelsize 10 align 5
              code0 {o->value(master->insefx[ninseff].geteffect());}
              code1 {if (master->Pinsparts[ninseff]== -1) o->deactivate();}
            } {
              MenuItem {} {
                label {No Effect}
                xywh {35 35 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label Reverb
                xywh {45 45 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label Echo
                xywh {55 55 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label Chorus
                xywh {65 65 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label Phaser
                xywh {70 70 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label AlienWah
                xywh {80 80 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label Distortion
                xywh {90 90 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label EQ
                xywh {100 100 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label DynFilter
                xywh {110 110 100 20} labelfont 1 labelsize 10
              }
            }
            Fl_Group simpleinseffectuigroup {
              xywh {350 95 234 95} box FLAT_BOX color 48
            } {
              Fl_Group simpleinseffectui {
                xywh {350 95 234 95}
                code0 {o->init(&master->insefx[ninseff]);}
                code1 {if (master->Pinsparts[ninseff]== -1) o->deactivate();}
                class SimpleEffUI
              } {}
            }
            Fl_Choice simpleinseffpart {
              label {Insert To.}
              callback {master->Pinsparts[ninseff]=(int) o->value()-2;
if ((int) o->value()==1){
    simpleinseffectuigroup->deactivate();
    simpleinsefftype->deactivate();
    simpleinseffectui->deactivate();
} else {
    simpleinseffectuigroup->activate();
    simpleinsefftype->activate();
    simpleinseffectui->activate();
};
master->insefx[ninseff].cleanup();} open
              xywh {435 75 80 20} down_box BORDER_BOX labelfont 1 labelsize 10 align 5 textsize 10
              code0 {o->add("Master Out");o->add("Off");}
              code1 {char tmp[50]; for (int i=0;i<NUM_MIXER_CHANNELS;i++) {sprintf(tmp,"Part %2d",i+1);o->add(tmp);};}
              code3 {o->value(master->Pinsparts[ninseff]+2);}
            } {}
            Fl_Button {} {
              label P
              callback {master->Lock();
presetsui->paste(&master->insefx[ninseff],simpleinseffectui);
master->Unlock();}
              xywh {560 65 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 55
            }
          }
        }
      }
      Fl_Group {} {open
        xywh {5 300 590 30} box ENGRAVED_FRAME
      } {
        Fl_Box {} {
          label {VU-Meter}
          xywh {5 300 590 30} box FLAT_BOX color 41 selection_color 75
          code0 {o->init(master,-1);}
          class VUMeter
        }
      }
      Fl_Dial simplemastervolumedial {
        label {Master Volume}
        callback {master->setPvolume((int) o->value());}
        tooltip {Master Volume} xywh {10 35 40 40} box ROUND_UP_BOX labelfont 1 labelsize 11 align 130 maximum 127 step 1
        code0 {o->value(master->Pvolume);}
        class WidgetPDial
      }
      Fl_Counter simplemasterkeyshiftcounter {
        label {Master KeyShift}
        callback {master->setPkeyshift((int) o->value()+64);}
        xywh {15 110 90 20} labelsize 11 minimum -64 maximum 64 step 1
        code0 {o->lstep(12);}
        code1 {o->value(master->Pkeyshift-64);}
      }
      Fl_Button {} {
        label {Stop ALL sounds!}
        callback {virkeyboard->relaseallkeys();
master->Lock();
master->shutup=1;
master->Unlock();}
        xywh {5 149 115 31} color 90 labelfont 1 labelsize 10
      }
      Fl_Button {} {
        label Reset
        callback {simpleglobalfinedetuneslider->value(64.0);
simpleglobalfinedetuneslider->do_callback();}
        tooltip {Master fine detune reset} xywh {70 30 50 17} box THIN_UP_BOX labelsize 11 align 128
      }
      Fl_Dial simpleglobalfinedetuneslider {
        label {Fine Detune}
        callback {master->microtonal.Pglobalfinedetune=(int) o->value();}
        tooltip {global fine detune} xywh {80 50 30 30} box ROUND_UP_BOX labelsize 11 align 130 maximum 127 step 1 value 64
        code0 {o->value(master->microtonal.Pglobalfinedetune);}
        class WidgetPDial
      }
      Fl_Counter simplenpartcounter {
        label Part
        callback {virkeys->relaseallkeys(0);
npartcounter->value(o->value());
npart=(int) o->value()-1;

simplerefresh();
virkeys->midich=master->GetChannel(npart)->Prcvchn;}
        tooltip {The part number} xywh {170 40 70 20} type Simple labelfont 1 align 4 minimum 0 maximum 127 step 1 value 1 textfont 1
        code0 {o->bounds(1,NUM_MIXER_CHANNELS);}
      }
      Fl_Counter {} {
        label {Keyb.Oct.}
        callback {virkeys->relaseallkeys(0);
virkeys->midioct=(int) o->value();
virkeys->take_focus();}
        tooltip {Midi Octave} xywh {5 190 55 20} type Simple labelsize 11 align 8 when 6 minimum 0 maximum 5 step 1 textfont 1 textsize 11
        code0 {o->value(virkeys->midioct);}
      }
      Fl_Button sm_indicator2 {
        label SM
        xywh {560 5 35 15} box ROUNDED_BOX down_box ROUNDED_BOX color 45 selection_color 93 labelfont 3 labelcolor 39 deactivate
      }
    }
    Fl_Window selectuiwindow {
      label {User Interface mode}
      callback {*exitprogram=1;}
      xywh {342 246 430 250} type Double hide non_modal
    } {
      Fl_Box {} {
        label {Welcome to ZynAddSubFX}
        xywh {5 5 425 40} labeltype SHADOW_LABEL labelfont 1 labelsize 26
      }
      Fl_Box {} {
        label {Please choose the interface mode:}
        xywh {10 50 265 25} labelfont 1 labelsize 13
      }
      Fl_Button {} {
        label Advanced
        callback {Config::Current().cfg.UserInterfaceMode=1;
masterwindow->show();
selectuiwindow->hide();}
        xywh {10 165 100 35} color 229 labelfont 1 labelsize 16
      }
      Fl_Box {} {
        label {.. if you have used ZynAddSubFX before, or you like to have full controll to all parameters.}
        xywh {110 165 310 35} labelfont 1 labelsize 11 align 144
      }
      Fl_Button {} {
        label Beginner
        callback {simplemasterwindow->show();
selectuiwindow->hide();
Config::Current().cfg.UserInterfaceMode=2;}
        xywh {10 80 100 65} color 238 labelfont 1 labelsize 16
      }
      Fl_Box {} {
        label {..if you are a beginner, you prefer using presets or you prefer to use simpler user interfaces. Most functionality of ZynAddSubFX will be hidden in this mode to make simple the learning/using it.}
        xywh {110 75 320 75} labelfont 1 labelsize 11 align 144
      }
      Fl_Box {} {
        label {You can switch the interface modes anytime you want.}
        xywh {30 215 360 25} box BORDER_BOX color 51 labelfont 1 labelsize 11 align 144
      }
    }
  }
  Function {updatesendwindow()} {} {
    code {for (int neff1=0;neff1<NUM_SYS_EFX;neff1++) 
  for (int neff2=neff1+1;neff2<NUM_SYS_EFX;neff2++)
    syseffsend[neff1][neff2]->value(master->GetSystemEffectSend(neff1, neff2));} {}
  }
  Function {updatepanel()} {open
  } {
    code {for (int npart=0;npart<NUM_MIXER_CHANNELS;npart++){
  panellistitem[npart]->refresh();
};} {}
  }
  Function {setfilelabel(const char *filename)} {} {
    code {if (filename!=nullptr) snprintf(&masterwindowlabel[0],100,"%s - ZynAddSubFX",fl_filename_name(filename));
  else snprintf(&masterwindowlabel[0],100,"%s","ZynAddSubFX");
masterwindowlabel[99]='\\0';
masterwindow->label(&masterwindowlabel[0]);
simplemasterwindow->label(&masterwindowlabel[0]);} {}
  }
  Function {MasterUI(Mixer *master_,Sequencer* seq_,int *exitprogram_)} {} {
    code {master=master_;
exitprogram=exitprogram_;
ninseff=0;
nsyseff=0;
npart=0;

for (int i=0;i<NUM_SYS_EFX;i++)
   for (int j=0;j<NUM_SYS_EFX;j++)
     syseffsend[i][j]=nullptr;

microtonalui=new MicrotonalUI(&master->microtonal);
virkeyboard=new VirKeyboard(master);
bankui=new BankUI(master,&npart);
configui=new ConfigUI();
sequi=new SequencerUI(seq_);

make_window();
presetsui=new PresetsUI();
setfilelabel(nullptr);
swapefftype=0;
simplerefresh();} {}
  }
  Function {~MasterUI()} {} {
    code {masterwindow->hide();
delete masterwindow;
simplemasterwindow->hide();
delete simplemasterwindow;
aboutwindow->hide();
delete aboutwindow;
syseffsendwindow->hide();
delete syseffsendwindow;

delete virkeyboard;
delete microtonalui;
delete bankui;
delete configui;

delete presetsui;
delete panelwindow;
delete selectuiwindow;} {}
  }
  Function {showUI()} {} {
    code {switch (Config::Current().cfg.UserInterfaceMode){
	case 0:selectuiwindow->show();
	break;
	case 1:masterwindow->show();
	break;
	case 2:simplemasterwindow->show();
	break;
};} {}
  }
  Function {simplerefresh()} {} {
    code {partenabled->value(master->GetChannel(npart)->Penabled);
if (master->GetChannel(npart)->Penabled!=0) simplelistitemgroup->activate();
     else simplelistitemgroup->deactivate();

partvolume->value(master->GetChannel(npart)->Pvolume);
partpanning->value(master->GetChannel(npart)->Ppanning);
partrcv->value(master->GetChannel(npart)->Prcvchn);

if (master->GetChannel(npart)->Pname[0]!=0) partname->label((char *)master->GetChannel(npart)->Pname);
	else partname->label("Click here to load a instrument");

simplelistitemgroup->redraw();
simplepartportamento->value(master->GetChannel(npart)->ctl.portamento.portamento);
simpleminkcounter->value(master->GetChannel(npart)->Pminkey);
simplemaxkcounter->value(master->GetChannel(npart)->Pmaxkey);

simplepartkeyshiftcounter->value(master->GetChannel(npart)->Pkeyshift-64);
simplesyseffsend->value(master->Psysefxvol[nsyseff][npart]);} {}
    code {nioui.refresh(this);} {}
  }
  Function {do_new_master_unconditional()} {} {
    code {delete microtonalui;

       master->Lock();
       master->Defaults();
       master->Unlock();
	
       npartcounter->value(1);
       refresh_master_ui();
       updatepanel();} {}
  }
  Function {do_new_master()} {} {
    code {if (fl_choice("Clear *ALL* the parameters ?","No","Yes",nullptr)){
         do_new_master_unconditional();
         }} {}
  }
  Function {do_load_master_unconditional(const char *filename, const char *display_name)} {return_type int
  } {
    code {master->Lock();
    //clear all parameters
    master->Defaults();
    
    //load the data
    int result=master->loadXML(filename);
    
    master->applyparameters(false);
    master->Unlock();
    
    npartcounter->value(1);
    refresh_master_ui();
    updatepanel();

    if (result>=0) setfilelabel(display_name);
    
    return result;} {}
  }
  Function {do_load_master(const char* file = nullptr)} {} {
    code {const char *filename;
  if (file == nullptr) {
    filename=fl_file_chooser("Open:","({*.xmz})",nullptr,0);
    if (filename==nullptr) return;
  }
  else {
    filename = file;
  }

  int result = do_load_master_unconditional( filename, filename );

if (result==-10) fl_alert("Error: Could not load the file\\nbecause it is not a zynaddsubfx parameters file.");
      else if (result<0) fl_alert("Error: Could not load the file.");} {}
  }
  Function {do_save_master(const char* file = nullptr)} {} {
    code {const char *filename;
char *tmp;
  int result=0;
  if (file == nullptr) {
    tmp=fl_file_chooser("Save:","({*.xmz})",nullptr,0);
    if (tmp==nullptr) return;
    tmp=fl_filename_setext(tmp,".xmz");
    filename=tmp;
    result=fileexists(tmp);
    if (result) {
      result=0;
      if (!fl_choice("The file exists. Overwrite it?","No","Yes",nullptr)) return;
      
    }
  }
  else {
    filename = file;
  }


master->Lock();
result=master->saveXML(filename);
master->Unlock();

if (result<0) fl_alert("Error: Could not save the file.");
	else
{
             setfilelabel(filename);
}
updatepanel();} {}
  }
  Function {refresh_master_ui()} {} {
    code {ninseff=0;
nsyseff=0;
npart=0;

//the Master UI
npartcounter->do_callback();
syseffnocounter->do_callback();
inseffnocounter->do_callback();
masterkeyshiftcounter->value(master->Pkeyshift-64);
mastervolumedial->value(master->Pvolume);    
globalfinedetuneslider->value(master->microtonal.Pglobalfinedetune);   
microtonalui=new MicrotonalUI(&master->microtonal);
nrpnbutton->value(master->ctl.NRPN.receive);
updatesendwindow();
updatepanel();

//the simle MasterUI
simplenpartcounter->value(1);
simplesyseffnocounter->value(1);
simpleinseffnocounter->value(1);
simplenpartcounter->do_callback();
simplesyseffnocounter->do_callback();
simpleinseffnocounter->do_callback();
simplemasterkeyshiftcounter->value(master->Pkeyshift-64);
simplemastervolumedial->value(master->Pvolume);    
simpleglobalfinedetuneslider->value(master->microtonal.Pglobalfinedetune);
virkeys->midich=master->GetChannel(npart)->Prcvchn;

simplerefresh();
bankui->hide();} {}
  }
  decl {Mixer *master;} {private local
  }
  decl {MicrotonalUI *microtonalui;} {private local
  }
  decl {BankUI *bankui;} {private local
  }
  decl {SequencerUI* sequi;} {private local
  }
  decl {int ninseff,npart;} {private local
  }
  decl {int nsyseff;} {private local
  }
  decl {int *exitprogram;} {private local
  }
  decl {SysEffSend *syseffsend[NUM_SYS_EFX][NUM_SYS_EFX];} {private local
  }
  decl {VirKeyboard *virkeyboard;} {private local
  }
  decl {ConfigUI *configui;} {private local
  }
  decl {int swapefftype;} {private local
  }
  decl {char masterwindowlabel[100];} {private local
  }
  decl {Panellistitem *panellistitem[NUM_MIXER_CHANNELS];} {private local
  }
  decl {NioUI nioui} {private local
  }
}
