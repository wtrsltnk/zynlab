# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
decl {//Copyright (c) 2002-2005 Nasca Octavian Paul} {private local
}

decl {//License: GNU GPL version 2 or later} {private local
}

decl {\#include <stdlib.h>} {public local
}

decl {\#include <stdio.h>} {public local
}

decl {\#include <string.h>} {public local
}

decl {\#include <FL/Fl_Button.H>} {public local
}

decl {\#include <FL/Fl_File_Chooser.H>} {public local
}

decl {\#include "zyn.mixer/Mixer.h"} {public local
}

decl {\#include "zyn.mixer/Instrument.h"} {public local
}

decl {\#include "zyn.mixer/Bank.h"} {public local
}

decl {\#include "zyn.common/Config.h"} {public local
}

decl {\#include "zyn.common/Util.h"} {public local
}

class BankProcess_ {} {
  Function {process()} {return_type {virtual void}
  } {
    code {;} {}
  }
  decl {Bank *bank;} {public local
  }
}

class BankSlot {: {public Fl_Button,BankProcess_}
} {
  Function {BankSlot(int x,int y, int w, int h, const char *label=0):Fl_Button(x,y,w,h,label)} {} {
    code {what=NULL;
whatslot=NULL;
nslot=0;
nselected=NULL;} {}
  }
  Function {handle(int event)} {open return_type int
  } {
    code {if (what==NULL) return(0);
if (Fl::event_inside(this)){
  *what=0;*whatslot=nslot;
  if ((event==FL_RELEASE)&&(Fl::event_button()==1))*what=1;
  if ((event==FL_RELEASE)&&(Fl::event_button()==3))*what=2;
  if (event==FL_PUSH) highlight=1;
}else highlight=0;

int tmp=Fl_Button::handle(event);
if ((*what!=0) && Fl::event_inside(this)) (bp->*fnc)();
return(tmp);} {}
  }
  Function {init(int nslot_, int *what_, int *whatslot_,void (BankProcess_:: *fnc_)(void),BankProcess_ *bp_,Bank *bank_,int *nselected_)} {open
  } {
    code {nslot=nslot_;
what=what_;
whatslot=whatslot_;
fnc=fnc_;
bp=bp_;
bank=bank_;
nselected=nselected_;
box(FL_THIN_UP_BOX);
labelfont(0);
labelsize(13);
align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE|FL_ALIGN_CLIP);

highlight=0;
refresh();} {}
  }
  Function {refresh()} {open
  } {
    code {if (bank->emptyslot(nslot))
    color(46);
else if (bank->isPADsynth_used(nslot)) 
    color(124);
else 
    color(51);


if (*nselected==nslot) 
    color(6);


copy_label(bank->getnamenumbered(nslot).c_str());} {}
  }
  decl {int *what,*whatslot,nslot,highlight, *nselected;} {private local
  }
  decl {void (BankProcess_:: *fnc)(void);} {private local
  }
  decl {BankProcess_ *bp;} {private local
  }
}

class BankUI {open : {public BankProcess_}
} {
  Function {make_window()} {open
  } {
    Fl_Window bankuiwindow {
      label Bank open
      xywh {392 123 803 671} type Double
      code0 {o->label(bank->bankfiletitle.c_str());}
      code1 {if (bank->bankfiletitle.empty()) o->label ("Choose a bank from the bank list on the left (or go to settings if to configure the bank location) or choose 'New Bank...' to make a new bank.");} visible
    } {
      Fl_Tabs {} {open
        xywh {5 10 790 600}
      } {
        Fl_Group {} {
          label Banks open
          xywh {5 28 790 582} box ENGRAVED_BOX hide
        } {
          Fl_Group {} {
            xywh {15 65 772 490} box ENGRAVED_FRAME
          } {
            Fl_Pack {} {
              xywh {20 70 150 485} box BORDER_FRAME
              code0 {o->box(FL_NO_BOX);}
              code1 {for (int i=0;i<32;i++){bs[i]=new BankSlot (0,0,o->w(),15," ");bs[i]->init(i,&what,&slot,&BankProcess_::process,(BankProcess_ *)this,bank,&nselected);};}
            } {}
            Fl_Pack {} {
              xywh {173 70 150 485} box BORDER_FRAME
              code0 {o->box(FL_NO_BOX);}
              code1 {for (int i=32;i<64;i++){bs[i]=new BankSlot (0,0,o->w(),15," ");bs[i]->init(i,&what,&slot,&BankProcess_::process,(BankProcess_ *)this,bank,&nselected);};}
            } {}
            Fl_Pack {} {
              xywh {326 70 150 485} box BORDER_FRAME
              code0 {o->box(FL_NO_BOX);}
              code1 {for (int i=64;i<96;i++){bs[i]=new BankSlot (0,0,o->w(),15," ");bs[i]->init(i,&what,&slot,&BankProcess_::process,(BankProcess_ *)this,bank,&nselected);};}
            } {}
            Fl_Pack {} {
              xywh {479 70 150 485} box BORDER_FRAME
              code0 {o->box(FL_NO_BOX);}
              code1 {for (int i=96;i<128;i++){bs[i]=new BankSlot (0,0,o->w(),15," ");bs[i]->init(i,&what,&slot,&BankProcess_::process,(BankProcess_ *)this,bank,&nselected);};}
            } {}
            Fl_Pack {} {
              xywh {632 70 150 485} box BORDER_FRAME
              code0 {o->box(FL_NO_BOX);}
              code1 {for (int i=128;i<160;i++){bs[i]=new BankSlot (0,0,o->w(),15," ");bs[i]->init(i,&what,&slot,&BankProcess_::process,(BankProcess_ *)this,bank,&nselected);};}
            } {}
          }
          Fl_Group modeselect {
            xywh {15 556 425 47} box ENGRAVED_BOX
          } {
            Fl_Check_Button writebutton {
              label WRITE
              callback {if (o->value()>0.5) mode=2;
removeselection();}
              xywh {126 562 99 37} type Radio box UP_BOX down_box DOWN_BOX labelfont 1 labelsize 13
              code0 {if (bank->locked()) o->deactivate();}
            }
            Fl_Check_Button readbutton {
              label READ
              callback {if (o->value()>0.5) mode=1;
removeselection();}
              xywh {21 562 99 37} type Radio box UP_BOX down_box DOWN_BOX labelfont 1 labelsize 13
              code0 {o->value(1);}
            }
            Fl_Check_Button clearbutton {
              label CLEAR
              callback {if (o->value()>0.5) mode=3;
removeselection();}
              xywh {231 562 99 37} type Radio box UP_BOX down_box DOWN_BOX labelfont 1 labelsize 13
              code0 {if (bank->locked()) o->deactivate();}
            }
            Fl_Check_Button swapbutton {
              label SWAP
              callback {if (o->value()>0.5) mode=4;
removeselection();}
              xywh {335 562 99 37} type Radio box UP_BOX down_box DOWN_BOX labelfont 1 labelsize 13
              code0 {if (bank->locked()) o->deactivate();}
            }
          }
          Fl_Button {} {
            label {New Bank...}
            callback {const char *dirname;

dirname=fl_input("New empty Bank:");
if (dirname==NULL) return;


int result=bank->newbank(dirname);

if (result!=0) fl_alert("Error: Could not make a new bank (directory)..");

refreshmainwindow();}
            xywh {690 40 93 25} labelfont 1 labelsize 11 align 128
          }
          Fl_Choice banklist {
            callback {int n=o->value();
std::string dirname=bank->banks[n].dir;
if (dirname.empty()) return;

if (bank->loadbank(dirname)==2)
       fl_alert("Error: Could not load the bank from the directory\\n%s.",dirname.c_str());
for (int i=0;i<BANK_SIZE;i++) bs[i]->refresh();
refreshmainwindow();} open
            xywh {15 41 220 24} down_box BORDER_BOX labelfont 1 align 0 textfont 1 textsize 11
          } {}
          Fl_Button {} {
            label {Refresh bank list}
            callback {rescan_for_banks();
banklist->value(0);}
            tooltip {Refresh the bank list (rescan)} xywh {240 41 105 24} box THIN_UP_BOX color 50 labelsize 11
          }
          Fl_Check_Button {} {
            label {Show PADsynth status}
            callback {Config::Current().cfg.CheckPADsynth=(int) o->value();
refreshmainwindow();}
            xywh {445 558 265 46} down_box DOWN_BOX labelsize 11
            code0 {o->value(Config::Current().cfg.CheckPADsynth);}
          }
        }
        Fl_Group {} {
          label {Instrument search} open
          xywh {5 30 790 580} box ENGRAVED_BOX
        } {
          Fl_Input searchFor {
            callback {Fl::remove_timeout(BankUI::search);
Fl::add_timeout(0.25, BankUI::search, (void*)this);}
            xywh {30 55 385 25} when 1
          }
          Fl_Browser searchResult {
            callback {for (int i = 0; i <= o->size(); i++)
{
    if (o->selected(i))
    {
        Bank::banksearchstruct* sr = (Bank::banksearchstruct*)o->data(i);
        master->bank.loadbank(sr->fullBankName);
        pthread_mutex_lock(&master->part[*npart]->load_mutex);
        bank->loadfromslot(sr->instrumentSlot,master->part[*npart]);
        pthread_mutex_unlock(&master->part[*npart]->load_mutex);
        master->part[*npart]->applyparameters();
        break;
    }
};} selected
            xywh {30 80 385 515} type Select when 1
            code0 {o->column_char('\\t');}
          }
        }
      }
      Fl_Button {} {
        label Close
        callback {bankuiwindow->hide();}
        xywh {720 637 75 23} box THIN_UP_BOX
      }
      Fl_Check_Button {} {
        label {auto close}
        callback {Config::Current().cfg.BankUIAutoClose=(int) o->value();}
        tooltip {automatically close the bank window if the instrument is loaded} xywh {720 613 75 26} down_box DOWN_BOX labelsize 10
        code0 {o->value(Config::Current().cfg.BankUIAutoClose);}
      }
    }
  }
  Function {BankUI(Mixer *master_,int *npart_)} {} {
    code {fnc=&BankProcess_::process;
master=master_;
npart=npart_;
bank=&master_->bank;
what=0;
nselected=-1;
make_window();
mode=1;} {}
  }
  Function {~BankUI()} {return_type virtual
  } {
    code {bankuiwindow->hide();
delete(bankuiwindow);} {}
  }
  Function {show()} {} {
    code {bankuiwindow->show();
simplesetmode(Config::Current().cfg.UserInterfaceMode==2);} {}
  }
  Function {hide()} {} {
    code {bankuiwindow->hide();} {}
  }
  Function {init(Fl_Valuator *cbwig_)} {} {
    code {cbwig=cbwig_;
rescan_for_banks();} {}
  }
  Function {process()} {return_type void
  } {
    code {int slot=this->slot;

if ((what==2)&&(bank->emptyslot(slot)==0)&&(mode!=4)) {//Rename slot
    const char *tmp=fl_input("Slot (instrument) name:",bank->getname(slot).c_str());
    if (tmp!=NULL) bank->setname(slot,tmp,-1);
    bs[slot]->refresh();
};

if ((what==1)&&(mode==1)&&(!bank->emptyslot(slot))){//Reads from slot
    pthread_mutex_lock(&master->part[*npart]->load_mutex);
     bank->loadfromslot(slot,master->part[*npart]);
    pthread_mutex_unlock(&master->part[*npart]->load_mutex);
    master->part[*npart]->applyparameters();
    snprintf((char *)master->part[*npart]->Pname,PART_MAX_NAME_LEN,"%s",bank->getname(slot).c_str());
     cbwig->do_callback();
     
     if (Config::Current().cfg.BankUIAutoClose!=0)
         bankuiwindow->hide();

};

if ((what==1)&&(mode==2)){//save(write) to slot
     if (!bank->emptyslot(slot)){
       if (!fl_choice("Overwrite the slot no. %d ?","No","Yes",NULL,slot+1)) goto nooverwriteslot;
      };
       pthread_mutex_lock(&master->part[*npart]->load_mutex);
        bank->savetoslot(slot,master->part[*npart]);
       pthread_mutex_unlock(&master->part[*npart]->load_mutex);

       bs[slot]->refresh();
       mode=1;readbutton->value(1);writebutton->value(0);
       nooverwriteslot:;
};



if ((what==1)&&(mode==3)&&(!bank->emptyslot(slot))){//Clears the slot
      if (fl_choice("Clear the slot no. %d ?","No","Yes",NULL,slot+1)){
          bank->clearslot(slot);
          bs[slot]->refresh();
      };
};

if (mode==4){//swap
    bool done=false;
    if ((what==1)&&(nselected>=0)){
         bank->swapslot(nselected,slot);
         int ns=nselected;
         nselected=-1;
         bs[slot]->refresh();
         bs[ns]->refresh();
         done=true;
    };
    if (((nselected<0)||(what==2))&&(!done)){
        int ns=nselected;
        nselected=slot;
        if (ns>0) bs[ns]->refresh();
        bs[slot]->refresh();
    };
};
if (mode!=4) refreshmainwindow();} {}
  }
  Function {refreshmainwindow()} {} {
    code {bankuiwindow->label(bank->bankfiletitle.c_str());
mode=1;readbutton->value(1);writebutton->value(0);clearbutton->value(0);swapbutton->value(0);
nselected=-1;
if (bank->locked()){
    writebutton->deactivate();
    clearbutton->deactivate();
    swapbutton->deactivate();
} else {
    writebutton->activate();
    clearbutton->activate();
    swapbutton->activate();
};
for (int i=0;i<BANK_SIZE;i++) 
   bs[i]->refresh();} {}
  }
  Function {removeselection()} {} {
    code {if (nselected>=0) {
   int ns=nselected;
   nselected=-1;
   bs[ns]->refresh();
};} {}
  }
  Function {rescan_for_banks()} {} {
    code {banklist->clear();
bank->rescanforbanks();

for (unsigned int i=0;i<bank->banks.size();i++) {
     banklist->add(bank->banks[i].name.c_str());
}
if (banklist->size() == 0)
     banklist->add(" ");} {}
  }
  Function {simplesetmode(bool beginnerui)} {} {
    code {readbutton->value(1);
mode=1;
removeselection();
if (beginnerui) modeselect->hide();
	else modeselect->show();} {}
  }
  Function {search(void* data)} {open return_type {static void}
  } {
    code {auto bankUI = (BankUI*)data;
bankUI->searchResult->clear();
bankUI->results = bankUI->master->bank.search(bankUI->searchFor->value());
for (const Bank::banksearchstruct& i : bankUI->results)
{
    bankUI->searchResult->add((i.shortBankName + " - " + i.instrumentName).c_str(), (void*)&i);
}} {}
  }
  decl {BankSlot *bs[BANK_SIZE];} {private local
  }
  decl {int slot,what;//"what"=what button is pressed} {private local
  }
  decl {int mode,*npart,nselected;} {private local
  }
  decl {Mixer *master;} {private local
  }
  decl {void (BankProcess_::* fnc)(void);} {private local
  }
  decl {Fl_Valuator *cbwig;} {public local
  }
  decl {std::vector<Bank::banksearchstruct> results;} {private local
  }
}
